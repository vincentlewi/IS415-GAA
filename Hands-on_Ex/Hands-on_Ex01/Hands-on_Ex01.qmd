---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
format: html
author: "Alexander Vincent Lewi"
date: "6 January 2024"
execute: 
  message: false
  warning: false
---

# Import Packages

```{r}
pacman::p_load(tidyverse, sf)
```

# Spatial Data

## Importing the Datasets

### Master Plan 2014 Subzone Boundaries (Web)

Polygon feature data in shapefile format obtained from [data.gov.sg](https://beta.data.gov.sg/collections/1708/view)

```{r}
mpsz = st_read(dsn = "data/geospatial", 
               layer = "MP14_SUBZONE_WEB_PL")
```

### Pre-Schools Location

Polyline feature data in shapefile format obtained from [data.gov.sg](https://beta.data.gov.sg/collections/2064/view)

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                      layer = "CyclingPathGazette")
```

### Cycling Path

GIS data in kml format obtained from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=cycling%20path)

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## Checking the Content of A Simple Feature Data Frame

Basic information of the feature class

```{r}
st_geometry(mpsz)
```

Associated attribute information in the data frame

```{r}
glimpse(mpsz)
```

Complete information of a feature object

```{r}
head(mpsz, n = 5)
```

## Plotting the Geospatial Data

Multi-plot of all attributes

```{r}
plot(mpsz)
```

Plot only the geometry of the sf object

```{r}
plot(st_geometry(mpsz))
```

We can also choose to plot a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

> Note: plot() is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.

## Projection Transformation

Checking the projection of the `mpsz` simple data frame

```{r}
st_crs(mpsz)
```

Although `mpsz` is projected in SVY21, it indicates that the EPSG code is 9001. This is a wrong EPSG code because the correct EPSG code for SVY21 should be [3414](https://epsg.io/3414).

> Trivia: SVY21 is the coordinate system for Singapore.

Now, let's assign EPSG code 3414 into `mpsz`

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Preschool, however, presents a different scenario. We cannot simply replace the EPSG code.

```{r}
st_geometry(preschool)
```

In this case, we can't use `st_set_crs()`. We need to reproject it from WGS 84 to SVY21 mathematically using `st_transform()`.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

# Aspatial Data

## Importing the Dataset

Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://data.insideairbnb.com/singapore/sg/singapore/2023-12-26/data/listings.csv.gz)

```{r}
listings <- read_csv("data/aspatial/listings.csv")
list(listings)
```

`listings` is a tibble data frame. Also note that the `latitude` and `longitude` are in decimal degree format. As a best guess, we will assume that the data is in WSG 84 Geographic Coordinate System.

## Creating a Simple Feature Data Frame from an Aspatial Data Frame

Now, lets create a simple data frame of the `latitude` and `longitude` using [EPSG:4326](https://epsg.io/4326) (WSG 84 Geographic Coordinate System), then project it into [EPSG:3414](https://epsg.io/3414) (Singapore SVY21 Projected Coordinate System).

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) |> 
  st_transform(crs = 3414)
```

Note that the `latitude` and `longitude` has been replaced by `geometry` column.

```{r}
glimpse(listings_sf)
```

# Geoprocessing

## Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, `st_buffer()` of sf package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                            dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, `sum()` of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

**Mission Accomplished!**

## Point-in-polygon count

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using `st_intersects()`. Next, `lengths()` of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- st_intersects(mpsz3414, preschool3414) |> lengths()
```

You can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the `top_n()` of dplyr package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

To calculate the density of pre-school by planning subzone, we need to first derive the area of each planning subzone using `st_area()`.

```{r}
mpsz3414$Area <- mpsz3414 |>
  st_area()
```

Next, `mutate()` of dplyr package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 |>
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# Exploratory Data Analysis (EDA)

Basic plot

```{r}
hist(mpsz3414$`PreSch Density`)
```

Fancier plot with ggplot2

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`))) +
  geom_histogram(bins = 20, 
                 color = "black",
                 fill = "light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

Scatterplot showing the relationship between Pre-school Density and Pre-school Count

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`), 
           y = `PreSch Count`)) +
  geom_point(color = "black",
             fill = "light blue") +
  xlim(0, 40) + 
  ylim(0, 40) + 
  labs(title = "",
       x = "Pre-school density (per km sq)", 
       y = "Pre-school count")
```
