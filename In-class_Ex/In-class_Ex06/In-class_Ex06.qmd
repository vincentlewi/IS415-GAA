---
title: "In-class Exercise 6: "
format: 
  html:
    toc-depth: 3
    code-overflow: "scroll"
author: "Alexander Vincent Lewi"
date: "4 March 2024"
execute: 
  message: false
  warning: false
  freeze: true
---

## Load Packages

```{r}
# GDAL is not in CRAN anymore. We are now using the `sp` package.
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, tidyverse, GGally)
```

## The Data

```{r}
shan_ict <- read_csv('data/aspatial/Shan-ICT.csv')
shan_ict
```

```{r}
shan <- st_read(dsn = 'data/geospatial', layer = 'myanmar_township_boundaries') |>
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)")) |> # filter only to Shan Province
  select(2:7) # select only the columns we need

# checking crs is irrelevant because we are building graphs
qtm(shan)
```

```{r}
shan_sf <- readRDS('data/rds/shan_sf.rds')
glimpse(shan_sf)
```

## Data Wrangling

```{r}
ict_derived <- shan_ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 
```

```{r}
shan_sf <- left_join(shan_sf, ict_derived, by=c("TS_PCODE" = "TS_PCODE")) #in reality you dont need the by statement as the name of the column is the same
# if you want to combine the data, it is recommended to do the spatial in the beginning for left_join

write_rds(shan_sf, 'data/rds/shan_sf.rds')
```

## EDA

```{r}
#build a lot of histograms together
radio <- ggplot(data=ict_derived, 
             aes(x= RADIO_PR)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= TV_PR)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= LLPHONE_PR)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= MPHONE_PR)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= COMPUTER_PR)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= INTERNET_PR)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2) # to combine the graphs together
```

## Correlation Analysis

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

## Hierarchy Cluster Analysis

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

### Data Standardization

#### min-max standardization

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

#### z-score standardization

```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

#### Visualizing the standardized clustering variables

```{r, fig.width=10, fig.height = 3}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

```{r, fig.width=10, fig.height = 3}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

### Computing proximity matrix

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
```

The code chunk below can then be used to list the content of proxmat for visual inspection.

```{r eval=FALSE}
proxmat
```

### Computing hierarchical clustering

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
plot(hclust_ward, cex = 0.6)
```

#### Selecting the optimal clustering algorithm

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

#### Determining Optimal Clusters

##### Gap statistics method

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

```{r}
fviz_gap_stat(gap_stat)
```

The graph goes down adn the up then down and up again, so choose the highest optimization value on the first bump, which is 5 or 6 in this case. From the statistic, the cluster 6 has a higher optimization, so that we can use cluster 6. see the gap value in the statistic

### Interpreting the dendrograms

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, # you can change the number of clusters here 
            border = 2:5)
```

### Visually-driven hierarchical clustering analysis

##### Transforming the data frame into a matrix

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

#### Plotting interactive cluster heatmap using heatmaply()

```{r}
heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

### Mapping the clusters formed

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The output is called *groups*. It is a *list* object.

In order to visualise the clusters, the *groups* object need to be appended onto *shan_sf* simple feature object.

The code chunk below form the join in three steps:

-   the *groups* list object will be converted into a matrix;

-   *cbind()* is used to append *groups* matrix onto shan_sf to produce an output simple feature object called `shan_sf_cluster`; and

-   *rename* of **dplyr** package is used to rename *as.matrix.groups* field as *CLUSTER*.

```{r}
# DONT sort. It will mess up cbind.
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>% rename(CLUSTER=as.matrix.groups.)
# use cbind because this one is just a list, and no unique identifier, but no sorting
```

```{r}
qtm(shan_sf_cluster, "CLUSTER")
# #the cluster number is a factor, so the cluster is nominal
```

The choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.

## **Spatially Constrained Clustering: SKATER approach**

### **Converting into SpatialPolygonsDataFrame**

```{r eval=FALSE}
# in the latest version, poly2nb can take in sf, so this step is no longer required.
shan_sp <- as_Spatial(shan_sf)
```

### **Computing Neighbour List**

```{r}
# shan.nb <- poly2nb(shan_sp)
shan.nb <- poly2nb(shan_sf)
summary(shan.nb)
```

We can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\\

```{r}
# plot(shan_sp,
#      border=grey(.5))
# plot(shan.nb, 
#      coordinates(shan_sp), 
#      col="blue", 
#      add=TRUE)

plot(st_geometry(shan_sf), # st_geometry to output only one layer of geometry, without the st_geometry--> then will plot the different columns; this is for the map 
     border=grey(.5))

pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb, # give the edge
     pts, # give the points
     col="blue", 
     add=TRUE)
```
