{
  "hash": "1d143c13b257acbc7424ac93f7fc86a9",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 6: \"\nformat: \n  html:\n    toc-depth: 3\n    code-overflow: \"scroll\"\nauthor: \"Alexander Vincent Lewi\"\ndate: \"4 March 2024\"\nexecute: \n  message: false\n  warning: false\n  freeze: true\n---\n\n\n## Load Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# GDAL is not in CRAN anymore. We are now using the `sp` package.\npacman::p_load(spdep, sp, tmap, sf, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, tidyverse, GGally)\n```\n:::\n\n\n## The Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_ict <- read_csv('data/aspatial/Shan-ICT.csv')\nshan_ict\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 55 × 11\n   `District Pcode` `District Name` `Township Pcode` `Township Name`\n   <chr>            <chr>           <chr>            <chr>          \n 1 MMR014D001       Taunggyi        MMR014001        Taunggyi       \n 2 MMR014D001       Taunggyi        MMR014002        Nyaungshwe     \n 3 MMR014D001       Taunggyi        MMR014003        Hopong         \n 4 MMR014D001       Taunggyi        MMR014004        Hsihseng       \n 5 MMR014D001       Taunggyi        MMR014005        Kalaw          \n 6 MMR014D001       Taunggyi        MMR014006        Pindaya        \n 7 MMR014D001       Taunggyi        MMR014007        Ywangan        \n 8 MMR014D001       Taunggyi        MMR014008        Lawksawk       \n 9 MMR014D001       Taunggyi        MMR014009        Pinlaung       \n10 MMR014D001       Taunggyi        MMR014010        Pekon          \n# ℹ 45 more rows\n# ℹ 7 more variables: `Total households` <dbl>, Radio <dbl>, Television <dbl>,\n#   `Land line phone` <dbl>, `Mobile phone` <dbl>, Computer <dbl>,\n#   `Internet at home` <dbl>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan <- st_read(dsn = 'data/geospatial', layer = 'myanmar_township_boundaries') |>\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) |> # filter only to Shan Province\n  select(2:7) # select only the columns we need\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\SMU\\Y3T2\\IS415 Geospatial Analytics and Applications\\IS415-GAA\\In-class_Ex\\In-class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\n# checking crs is irrelevant because we are building graphs\nqtm(shan)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf <- readRDS('data/rds/shan_sf.rds')\nglimpse(shan_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 55\nColumns: 119\n$ ST                  <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"S…\n$ ST_PCODE            <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", …\n$ DT.x                <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mo…\n$ DT_PCODE.x          <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D…\n$ TS.x                <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabe…\n$ TS_PCODE            <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\"…\n$ DT_PCODE.y          <chr> \"MMR015D003\", \"MMR014D001\", \"MMR014D001\", \"MMR014D…\n$ DT.y                <chr> \"Kyaukme\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Ky…\n$ TS.y                <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabe…\n$ TT_HOUSEHOLDS.x     <dbl> 13652, 17544, 18348, 25504, 8632, 41341, 20084, 25…\n$ RADIO.x             <dbl> 3907, 7324, 8890, 5908, 3880, 11607, 6399, 10048, …\n$ TV.x                <dbl> 7565, 8862, 4781, 13816, 6117, 25285, 10762, 16353…\n$ LLPHONE.x           <dbl> 482, 348, 219, 728, 628, 1739, 800, 818, 1239, 112…\n$ MPHONE.x            <dbl> 3559, 2849, 2207, 6363, 3389, 16900, 4315, 8321, 1…\n$ COMPUTER.x          <dbl> 166, 226, 81, 351, 142, 1225, 381, 565, 508, 878, …\n$ INTERNET.x          <dbl> 321, 136, 152, 737, 165, 1741, 316, 556, 1216, 936…\n$ RADIO_PR.x          <dbl> 286.18517, 417.46466, 484.52147, 231.64994, 449.49…\n$ TV_PR.x             <dbl> 554.1313, 505.1300, 260.5734, 541.7189, 708.6423, …\n$ LLPHONE_PR.x        <dbl> 35.306182, 19.835841, 11.935906, 28.544542, 72.752…\n$ MPHONE_PR.x         <dbl> 260.69440, 162.39170, 120.28559, 249.49028, 392.60…\n$ COMPUTER_PR.x       <dbl> 12.159391, 12.881897, 4.414650, 13.762547, 16.4504…\n$ INTERNET_PR.x       <dbl> 23.513038, 7.751938, 8.284282, 28.897428, 19.11492…\n$ DT_PCODE.x.x        <chr> \"MMR015D003\", \"MMR014D001\", \"MMR014D001\", \"MMR014D…\n$ DT.x.x              <chr> \"Kyaukme\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Ky…\n$ TS.x.x              <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabe…\n$ TT_HOUSEHOLDS.y     <dbl> 13652, 17544, 18348, 25504, 8632, 41341, 20084, 25…\n$ RADIO.y             <dbl> 3907, 7324, 8890, 5908, 3880, 11607, 6399, 10048, …\n$ TV.y                <dbl> 7565, 8862, 4781, 13816, 6117, 25285, 10762, 16353…\n$ LLPHONE.y           <dbl> 482, 348, 219, 728, 628, 1739, 800, 818, 1239, 112…\n$ MPHONE.y            <dbl> 3559, 2849, 2207, 6363, 3389, 16900, 4315, 8321, 1…\n$ COMPUTER.y          <dbl> 166, 226, 81, 351, 142, 1225, 381, 565, 508, 878, …\n$ INTERNET.y          <dbl> 321, 136, 152, 737, 165, 1741, 316, 556, 1216, 936…\n$ RADIO_PR.y          <dbl> 286.18517, 417.46466, 484.52147, 231.64994, 449.49…\n$ TV_PR.y             <dbl> 554.1313, 505.1300, 260.5734, 541.7189, 708.6423, …\n$ LLPHONE_PR.y        <dbl> 35.306182, 19.835841, 11.935906, 28.544542, 72.752…\n$ MPHONE_PR.y         <dbl> 260.69440, 162.39170, 120.28559, 249.49028, 392.60…\n$ COMPUTER_PR.y       <dbl> 12.159391, 12.881897, 4.414650, 13.762547, 16.4504…\n$ INTERNET_PR.y       <dbl> 23.513038, 7.751938, 8.284282, 28.897428, 19.11492…\n$ DT_PCODE.y.y        <chr> \"MMR015D003\", \"MMR014D001\", \"MMR014D001\", \"MMR014D…\n$ DT.y.y              <chr> \"Kyaukme\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Ky…\n$ TS.y.y              <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabe…\n$ TT_HOUSEHOLDS.x.x   <dbl> 13652, 17544, 18348, 25504, 8632, 41341, 20084, 25…\n$ RADIO.x.x           <dbl> 3907, 7324, 8890, 5908, 3880, 11607, 6399, 10048, …\n$ TV.x.x              <dbl> 7565, 8862, 4781, 13816, 6117, 25285, 10762, 16353…\n$ LLPHONE.x.x         <dbl> 482, 348, 219, 728, 628, 1739, 800, 818, 1239, 112…\n$ MPHONE.x.x          <dbl> 3559, 2849, 2207, 6363, 3389, 16900, 4315, 8321, 1…\n$ COMPUTER.x.x        <dbl> 166, 226, 81, 351, 142, 1225, 381, 565, 508, 878, …\n$ INTERNET.x.x        <dbl> 321, 136, 152, 737, 165, 1741, 316, 556, 1216, 936…\n$ RADIO_PR.x.x        <dbl> 286.18517, 417.46466, 484.52147, 231.64994, 449.49…\n$ TV_PR.x.x           <dbl> 554.1313, 505.1300, 260.5734, 541.7189, 708.6423, …\n$ LLPHONE_PR.x.x      <dbl> 35.306182, 19.835841, 11.935906, 28.544542, 72.752…\n$ MPHONE_PR.x.x       <dbl> 260.69440, 162.39170, 120.28559, 249.49028, 392.60…\n$ COMPUTER_PR.x.x     <dbl> 12.159391, 12.881897, 4.414650, 13.762547, 16.4504…\n$ INTERNET_PR.x.x     <dbl> 23.513038, 7.751938, 8.284282, 28.897428, 19.11492…\n$ DT_PCODE.x.x.x      <chr> \"MMR015D003\", \"MMR014D001\", \"MMR014D001\", \"MMR014D…\n$ DT.x.x.x            <chr> \"Kyaukme\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Ky…\n$ TS.x.x.x            <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabe…\n$ TT_HOUSEHOLDS.y.y   <dbl> 13652, 17544, 18348, 25504, 8632, 41341, 20084, 25…\n$ RADIO.y.y           <dbl> 3907, 7324, 8890, 5908, 3880, 11607, 6399, 10048, …\n$ TV.y.y              <dbl> 7565, 8862, 4781, 13816, 6117, 25285, 10762, 16353…\n$ LLPHONE.y.y         <dbl> 482, 348, 219, 728, 628, 1739, 800, 818, 1239, 112…\n$ MPHONE.y.y          <dbl> 3559, 2849, 2207, 6363, 3389, 16900, 4315, 8321, 1…\n$ COMPUTER.y.y        <dbl> 166, 226, 81, 351, 142, 1225, 381, 565, 508, 878, …\n$ INTERNET.y.y        <dbl> 321, 136, 152, 737, 165, 1741, 316, 556, 1216, 936…\n$ RADIO_PR.y.y        <dbl> 286.18517, 417.46466, 484.52147, 231.64994, 449.49…\n$ TV_PR.y.y           <dbl> 554.1313, 505.1300, 260.5734, 541.7189, 708.6423, …\n$ LLPHONE_PR.y.y      <dbl> 35.306182, 19.835841, 11.935906, 28.544542, 72.752…\n$ MPHONE_PR.y.y       <dbl> 260.69440, 162.39170, 120.28559, 249.49028, 392.60…\n$ COMPUTER_PR.y.y     <dbl> 12.159391, 12.881897, 4.414650, 13.762547, 16.4504…\n$ INTERNET_PR.y.y     <dbl> 23.513038, 7.751938, 8.284282, 28.897428, 19.11492…\n$ DT_PCODE.y.y.y      <chr> \"MMR015D003\", \"MMR014D001\", \"MMR014D001\", \"MMR014D…\n$ DT.y.y.y            <chr> \"Kyaukme\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Ky…\n$ TS.y.y.y            <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabe…\n$ TT_HOUSEHOLDS.x.x.x <dbl> 13652, 17544, 18348, 25504, 8632, 41341, 20084, 25…\n$ RADIO.x.x.x         <dbl> 3907, 7324, 8890, 5908, 3880, 11607, 6399, 10048, …\n$ TV.x.x.x            <dbl> 7565, 8862, 4781, 13816, 6117, 25285, 10762, 16353…\n$ LLPHONE.x.x.x       <dbl> 482, 348, 219, 728, 628, 1739, 800, 818, 1239, 112…\n$ MPHONE.x.x.x        <dbl> 3559, 2849, 2207, 6363, 3389, 16900, 4315, 8321, 1…\n$ COMPUTER.x.x.x      <dbl> 166, 226, 81, 351, 142, 1225, 381, 565, 508, 878, …\n$ INTERNET.x.x.x      <dbl> 321, 136, 152, 737, 165, 1741, 316, 556, 1216, 936…\n$ RADIO_PR.x.x.x      <dbl> 286.18517, 417.46466, 484.52147, 231.64994, 449.49…\n$ TV_PR.x.x.x         <dbl> 554.1313, 505.1300, 260.5734, 541.7189, 708.6423, …\n$ LLPHONE_PR.x.x.x    <dbl> 35.306182, 19.835841, 11.935906, 28.544542, 72.752…\n$ MPHONE_PR.x.x.x     <dbl> 260.69440, 162.39170, 120.28559, 249.49028, 392.60…\n$ COMPUTER_PR.x.x.x   <dbl> 12.159391, 12.881897, 4.414650, 13.762547, 16.4504…\n$ INTERNET_PR.x.x.x   <dbl> 23.513038, 7.751938, 8.284282, 28.897428, 19.11492…\n$ DT_PCODE.x.x.x.x    <chr> \"MMR015D003\", \"MMR014D001\", \"MMR014D001\", \"MMR014D…\n$ DT.x.x.x.x          <chr> \"Kyaukme\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Ky…\n$ TS.x.x.x.x          <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabe…\n$ TT_HOUSEHOLDS.y.y.y <dbl> 13652, 17544, 18348, 25504, 8632, 41341, 20084, 25…\n$ RADIO.y.y.y         <dbl> 3907, 7324, 8890, 5908, 3880, 11607, 6399, 10048, …\n$ TV.y.y.y            <dbl> 7565, 8862, 4781, 13816, 6117, 25285, 10762, 16353…\n$ LLPHONE.y.y.y       <dbl> 482, 348, 219, 728, 628, 1739, 800, 818, 1239, 112…\n$ MPHONE.y.y.y        <dbl> 3559, 2849, 2207, 6363, 3389, 16900, 4315, 8321, 1…\n$ COMPUTER.y.y.y      <dbl> 166, 226, 81, 351, 142, 1225, 381, 565, 508, 878, …\n$ INTERNET.y.y.y      <dbl> 321, 136, 152, 737, 165, 1741, 316, 556, 1216, 936…\n$ RADIO_PR.y.y.y      <dbl> 286.18517, 417.46466, 484.52147, 231.64994, 449.49…\n$ TV_PR.y.y.y         <dbl> 554.1313, 505.1300, 260.5734, 541.7189, 708.6423, …\n$ LLPHONE_PR.y.y.y    <dbl> 35.306182, 19.835841, 11.935906, 28.544542, 72.752…\n$ MPHONE_PR.y.y.y     <dbl> 260.69440, 162.39170, 120.28559, 249.49028, 392.60…\n$ COMPUTER_PR.y.y.y   <dbl> 12.159391, 12.881897, 4.414650, 13.762547, 16.4504…\n$ INTERNET_PR.y.y.y   <dbl> 23.513038, 7.751938, 8.284282, 28.897428, 19.11492…\n$ DT_PCODE.y.y.y.y    <chr> \"MMR015D003\", \"MMR014D001\", \"MMR014D001\", \"MMR014D…\n$ DT.y.y.y.y          <chr> \"Kyaukme\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Ky…\n$ TS.y.y.y.y          <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabe…\n$ TT_HOUSEHOLDS       <dbl> 13652, 17544, 18348, 25504, 8632, 41341, 20084, 25…\n$ RADIO               <dbl> 3907, 7324, 8890, 5908, 3880, 11607, 6399, 10048, …\n$ TV                  <dbl> 7565, 8862, 4781, 13816, 6117, 25285, 10762, 16353…\n$ LLPHONE             <dbl> 482, 348, 219, 728, 628, 1739, 800, 818, 1239, 112…\n$ MPHONE              <dbl> 3559, 2849, 2207, 6363, 3389, 16900, 4315, 8321, 1…\n$ COMPUTER            <dbl> 166, 226, 81, 351, 142, 1225, 381, 565, 508, 878, …\n$ INTERNET            <dbl> 321, 136, 152, 737, 165, 1741, 316, 556, 1216, 936…\n$ RADIO_PR            <dbl> 286.18517, 417.46466, 484.52147, 231.64994, 449.49…\n$ TV_PR               <dbl> 554.1313, 505.1300, 260.5734, 541.7189, 708.6423, …\n$ LLPHONE_PR          <dbl> 35.306182, 19.835841, 11.935906, 28.544542, 72.752…\n$ MPHONE_PR           <dbl> 260.69440, 162.39170, 120.28559, 249.49028, 392.60…\n$ COMPUTER_PR         <dbl> 12.159391, 12.881897, 4.414650, 13.762547, 16.4504…\n$ INTERNET_PR         <dbl> 23.513038, 7.751938, 8.284282, 28.897428, 19.11492…\n$ geometry            <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTI…\n```\n:::\n:::\n\n\n## Data Wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nict_derived <- shan_ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf <- left_join(shan_sf, ict_derived, by=c(\"TS_PCODE\" = \"TS_PCODE\")) #in reality you dont need the by statement as the name of the column is the same\n# if you want to combine the data, it is recommended to do the spatial in the beginning for left_join\n\nwrite_rds(shan_sf, 'data/rds/shan_sf.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf <- readRDS('data/rds/shan_sf.rds')\n```\n:::\n\n\n## EDA\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#build a lot of histograms together\nradio <- ggplot(data=ict_derived, \n             aes(x= RADIO_PR)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= TV_PR)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= LLPHONE_PR)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= MPHONE_PR)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= COMPUTER_PR)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= INTERNET_PR)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2) # to combine the graphs together\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Correlation Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Hierarchy Cluster Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n```\n:::\n:::\n\n\n### Data Standardization\n\n#### min-max standardization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n```\n:::\n:::\n\n\n#### z-score standardization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n```\n:::\n:::\n\n\n#### Visualizing the standardized clustering variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n### Computing proximity matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproxmat <- dist(shan_ict, method = 'euclidean')\n```\n:::\n\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproxmat\n```\n:::\n\n\n### Computing hierarchical clustering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhclust_ward <- hclust(proxmat, method = 'ward.D')\nplot(hclust_ward, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n#### Selecting the optimal clustering algorithm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n```\n:::\n:::\n\n\n#### Determining Optimal Clusters\n\n##### Gap statistics method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_gap_stat(gap_stat)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nThe graph goes down adn the up then down and up again, so choose the highest optimization value on the first bump, which is 5 or 6 in this case. From the statistic, the cluster 6 has a higher optimization, so that we can use cluster 6. see the gap value in the statistic\n\n### Interpreting the dendrograms\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, # you can change the number of clusters here \n            border = 2:5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### Visually-driven hierarchical clustering analysis\n\n##### Transforming the data frame into a matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_ict_mat <- data.matrix(shan_ict)\n```\n:::\n\n\n#### Plotting interactive cluster heatmap using heatmaply()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n```\n:::\n\n\n### Mapping the clusters formed\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups <- as.factor(cutree(hclust_ward, k=6))\n```\n:::\n\n\nThe output is called *groups*. It is a *list* object.\n\nIn order to visualise the clusters, the *groups* object need to be appended onto *shan_sf* simple feature object.\n\nThe code chunk below form the join in three steps:\n\n-   the *groups* list object will be converted into a matrix;\n\n-   *cbind()* is used to append *groups* matrix onto shan_sf to produce an output simple feature object called `shan_sf_cluster`; and\n\n-   *rename* of **dplyr** package is used to rename *as.matrix.groups* field as *CLUSTER*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# DONT sort. It will mess up cbind.\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>% rename(CLUSTER=as.matrix.groups.)\n# use cbind because this one is just a list, and no unique identifier, but no sorting\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_cluster, \"CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# #the cluster number is a factor, so the cluster is nominal\n```\n:::\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.\n\n## **Spatially Constrained Clustering: SKATER approach**\n\n### **Converting into SpatialPolygonsDataFrame**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# in the latest version, poly2nb can take in sf, so this step is no longer required.\nshan_sp <- as_Spatial(shan_sf)\n```\n:::\n\n\n### **Computing Neighbour List**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# shan.nb <- poly2nb(shan_sp)\nshan.nb <- poly2nb(shan_sf)\nsummary(shan.nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n```\n:::\n:::\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\\\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot(shan_sp,\n#      border=grey(.5))\n# plot(shan.nb, \n#      coordinates(shan_sp), \n#      col=\"blue\", \n#      add=TRUE)\n\nplot(st_geometry(shan_sf), # st_geometry to output only one layer of geometry, without the st_geometry--> then will plot the different columns; this is for the map \n     border=grey(.5))\n\npts <- st_coordinates(st_centroid(shan_sf))\nplot(shan.nb, # give the edge\n     pts, # give the points\n     col=\"blue\", \n     add=TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}